#!/usr/bin/env node
var path        = require('path');
var fs          = require('fs');
var subarg      = require('subarg');
var toCamelCase = require('to-camel-case');
var xcss        = require('../index');
var compile     = require('../compiler');

var argv = subarg(process.argv, {
  boolean: ['c', 'compile', 'h', 'help', 'object-model']
});

if (argv.help|| argv.h) {
  usage();
  process.exit(0);
}

var arg = argv._[2];
var file = arg;

if (!file || !fs.existsSync(file)) {
  usage();
  error('provide a filename as an argument');
}

file = path.resolve(file);

if (argv['object-model']) {

  console.log(compile(fs.readFileSync(file, 'utf8')));
} else {

  var stylesheet = require(file);

  if (stylesheet.type === 'module') {
    error(arg + " is a parametrized module and can't generate CSS");
  }

  var transforms = [].concat(argv.t).concat(argv.transform).filter(Boolean);

  stylesheet = transforms.reduce(function(stylesheet, transform) {
    var id = transform._ ? transform._[0] : transform;
    var opts = {};
    for (var k in transform) {
      if (transform.hasOwnProperty(k) && k !== '_') {
        opts[toCamelCase(k)] = transform[k];
      }
    }
    transform = require(id);
    return stylesheet.transform(transform, options);
  }, stylesheet);

  console.log(stylesheet.toCSS({compress: argv.c || argv.compress}));
}

function usage() {
  console.log(fs.readFileSync(path.join(__dirname, 'usage.txt'), 'utf8'));
}

function error(msg) {
  console.warn('error:', msg);
  process.exit(1);
}
